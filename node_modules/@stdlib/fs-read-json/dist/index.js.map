{
  "version": 3,
  "sources": ["../lib/async.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar readFile = require( '@stdlib/fs-read-file' );\nvar removeBOM = require( '@stdlib/string-remove-utf8-bom' );\nvar parseJSON = require( '@stdlib/utils-parse-json' );\nvar instanceOf = require( '@stdlib/assert-instance-of' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readJSON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar removeBOM = require( '@stdlib/string-remove-utf8-bom' );\nvar parseJSON = require( '@stdlib/utils-parse-json' );\nvar instanceOf = require( '@stdlib/assert-instance-of' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(JSON|Error)} JSON or an error\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var instanceOf = require( '@stdlib/assert-instance-of' );\n*\n* var out = readJSONSync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseJSON( f, opts.reviver );\n\t}\n\treturn parseJSON( f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readJSONSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as JSON.\n*\n* @module @stdlib/fs-read-json\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var readJSON = require( '@stdlib/fs-read-json' );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var instanceOf = require( '@stdlib/assert-instance-of' );\n* var readJSON = require( '@stdlib/fs-read-json' );\n*\n* var out = readJSON.sync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar readJSON = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readJSON, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readJSON;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAW,QAAS,gCAAiC,EACrDC,EAAa,QAAS,4BAA6B,EACnDC,EAAW,QAAS,sBAAuB,EAC3CC,EAAY,QAAS,gCAAiC,EACtDC,EAAY,QAAS,0BAA2B,EAChDC,EAAa,QAAS,4BAA6B,EACnDC,EAAS,QAAS,uBAAwB,EA6B9C,SAASC,EAAUC,EAAMC,EAASC,EAAO,CACxC,IAAIC,EACAC,EACJ,GAAK,UAAU,OAAS,EACvBD,EAAO,CAAC,EACRC,EAAOH,MACD,CACN,GAAKV,EAAUU,CAAQ,EACtBE,EAAO,CACN,SAAYF,CACb,MACM,CACN,GAAK,CAACT,EAAUS,CAAQ,EACvB,MAAM,IAAI,UAAWH,EAAQ,wFAAyFG,CAAQ,CAAE,EAEjIE,EAAOF,CACR,CACAG,EAAOF,CACR,CACA,GAAK,CAACT,EAAYW,CAAK,EACtB,MAAM,IAAI,UAAWN,EAAQ,uEAAwEM,CAAK,CAAE,EAE7GV,EAAUM,EAAMG,EAAME,CAAO,EAU7B,SAASA,EAAQC,EAAON,EAAO,CAC9B,GAAKM,EACJ,OAAOF,EAAME,CAAM,EAWpB,GATAN,EAAOA,EAAK,SAAS,EAChBG,EAAK,WAAa,SACtBH,EAAOL,EAAWK,CAAK,GAEnBG,EAAK,QACTH,EAAOJ,EAAWI,EAAMG,EAAK,OAAQ,EAErCH,EAAOJ,EAAWI,CAAK,EAEnBH,EAAYG,EAAM,KAAM,EAC5B,OAAOI,EAAMJ,CAAK,EAEnBI,EAAM,KAAMJ,CAAK,CAClB,CACD,CAKAV,EAAO,QAAUS,ICjHjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAW,QAAS,gCAAiC,EACrDC,EAAW,QAAS,sBAAuB,EAAE,KAC7CC,EAAY,QAAS,gCAAiC,EACtDC,EAAY,QAAS,0BAA2B,EAChDC,EAAa,QAAS,4BAA6B,EACnDC,EAAS,QAAS,uBAAwB,EA0B9C,SAASC,EAAcC,EAAMC,EAAU,CACtC,IAAIC,EACAC,EACJ,GAAK,UAAU,OAAS,EACvB,GAAKX,EAAUS,CAAQ,EACtBC,EAAO,CACN,SAAYD,CACb,MACM,CACN,GAAK,CAACR,EAAUQ,CAAQ,EACvB,MAAM,IAAI,UAAWH,EAAQ,wFAAyFG,CAAQ,CAAE,EAEjIC,EAAOD,CACR,MAEAC,EAAO,CAAC,EAGT,OADAC,EAAIT,EAAUM,EAAME,CAAK,EACpBL,EAAYM,EAAG,KAAM,EAClBA,GAERA,EAAIA,EAAE,SAAS,EACVD,EAAK,WAAa,SACtBC,EAAIR,EAAWQ,CAAE,GAEbD,EAAK,QACFN,EAAWO,EAAGD,EAAK,OAAQ,EAE5BN,EAAWO,CAAE,EACrB,CAKAZ,EAAO,QAAUQ,ICpCjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,IACXC,EAAO,IAKXF,EAAaC,EAAU,OAAQC,CAAK,EAKpC,OAAO,QAAUD",
  "names": ["require_async", "__commonJSMin", "exports", "module", "isString", "isObject", "isFunction", "readFile", "removeBOM", "parseJSON", "instanceOf", "format", "readJSON", "file", "options", "clbk", "opts", "done", "onRead", "error", "require_sync", "__commonJSMin", "exports", "module", "isString", "isObject", "readFile", "removeBOM", "parseJSON", "instanceOf", "format", "readJSONSync", "file", "options", "opts", "f", "setReadOnly", "readJSON", "sync"]
}
