{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/prngs.js", "../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"name\": \"improved-ziggurat\",\n\t\"copy\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar boxMuller = require( '@stdlib/random-base-box-muller' );\nvar improvedZiggurat = require( '@stdlib/random-base-improved-ziggurat' );\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'box-muller' ] = boxMuller;\nprngs[ 'improved-ziggurat' ] = improvedZiggurat;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar format = require( '@stdlib/string-format' );\nvar noop = require( '@stdlib/utils-noop' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for numbers from a standard normal distribution.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='improved-ziggurat'] - name of pseudorandom number generator\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller'\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\topts.prng = options.prng;\n\t\t\tif ( opts.prng === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( 'invalid option. Unrecognized/unsupported PRNG. Option: `%s`.', opts.name ) );\n\t}\n\tif ( opts.prng === void 0 ) {\n\t\tif ( opts.state === void 0 ) {\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\trand = prng.factory();\n\t\t\t} else {\n\t\t\t\trand = prng.factory({\n\t\t\t\t\t'seed': opts.seed\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'state': opts.state,\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'prng': opts.prng\n\t\t});\n\t}\n\tsetReadOnly( normal, 'NAME', 'randn' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts.prng ) {\n\t\tsetReadOnly( normal, 'seed', null );\n\t\tsetReadOnly( normal, 'seedLength', null );\n\t\tsetReadWriteAccessor( normal, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( normal, 'stateLength', null );\n\t\tsetReadOnly( normal, 'byteLength', null );\n\t\tsetReadOnly( normal, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( normal, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( normal, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( normal, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( normal, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( normal, 'byteLength', getStateSize );\n\t\tsetReadOnly( normal, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( normal, 'PRNG', rand.PRNG );\n\treturn normal;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = normal.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a standard normal distribution.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal();\n\t* // returns <number>\n\t*/\n\tfunction normal() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a standard normal random number.\n*\n* @name normal\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal();\n* // returns <number>\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard normal pseudorandom numbers.\n*\n* @module @stdlib/random-base-randn\n*\n* @example\n* var randn = require( '@stdlib/random-base-randn' );\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-randn' ).factory;\n*\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n*\n* var v = randn();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_prngs", "__commonJSMin", "exports", "module", "boxMuller", "improvedZiggurat", "prngs", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isBoolean", "hasOwnProp", "constantFunction", "format", "noop", "typedarray2json", "defaults", "PRNGS", "factory", "options", "opts", "rand", "prng", "normal", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "normal", "setReadOnly", "main", "factory"]
}
